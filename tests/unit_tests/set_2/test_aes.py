from set_2.challenge_2.aes import _key_expansion, encrypt_aes, _galois_multiplication, decrypt_aes


def test_key_expansion():
    word = b"\x0f\x15\x71\xc9\x47\xd9\xe8\x59\x0c\xb7\xad\xd6\xaf\x7f\x67\x98"
    values = _key_expansion(word)
    results = []
    for res in values:
        results.append(res.to_bytes(4, "big"))
    assert len(results) == 44
    assert results[0:4] == [b"\x0f\x15\x71\xc9", b"\x47\xd9\xe8\x59", b"\x0c\xb7\xad\xd6", b"\xaf\x7f\x67\x98"]
    assert results[4:8] == [b"\xdc\x90\x37\xb0", b"\x9b\x49\xdf\xe9", b"\x97\xfe\x72\x3f", b"\x38\x81\x15\xa7"]
    assert results[8] == b"\xd2\xc9\x6b\xb7"
    assert results[12] == b"\xc0\xaf\xdf\x39"
    assert results[16] == b"\x2c\x5c\x65\xf1"
    assert results[25] == b"\x8c\x29\x74\xbf"
    assert results[33] == b"\xf3\x1b\xa2\xd7"
    assert results[36:40] == [b"\xfd\x0d\x42\xcb", b"\x0e\x16\xe0\x1c", b"\xc5\xd5\x4a\x6e", b"\xf9\x6b\x41\x56"]
    assert results[40:44] == [b"\xb4\x8e\xf3\x52", b"\xba\x98\x13\x4e", b"\x7f\x4d\x59\x20", b"\x86\x26\x18\x76"]


def test_encrypt_aes():
    plaintext = b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"
    ciphertext = b"\xff\x0b\x84\x4a\x08\x53\xbf\x7c\x69\x34\xab\x43\x64\x14\x8f\xb9"
    key = b"\x0f\x15\x71\xc9\x47\xd9\xe8\x59\x0c\xb7\xad\xd6\xaf\x7f\x67\x98"
    assert ciphertext == encrypt_aes(plaintext, key)


def test_decrypt_aes():
    plaintext = b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"
    ciphertext = b"\xff\x0b\x84\x4a\x08\x53\xbf\x7c\x69\x34\xab\x43\x64\x14\x8f\xb9"
    key = b"\x0f\x15\x71\xc9\x47\xd9\xe8\x59\x0c\xb7\xad\xd6\xaf\x7f\x67\x98"
    assert plaintext == decrypt_aes(ciphertext, key)


def test_galois_multiplication():
    assert 0x15 == _galois_multiplication(0x02, 0x87)
    assert 148 == _galois_multiplication(0x03, 0x85)

from set_2.challenge_1 import pad_pkcs7

SBOX = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
)
SBOX_INV = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
)

MIX_COLUMN_MATRIX = [0x02, 0x03, 0x01, 0x01, 0x01, 0x02, 0x03, 0x01, 0x01, 0x01, 0x02, 0x03, 0x03, 0x01, 0x01, 0x02]
INV_MIX_COLUMN_MATRIX = [0x0E, 0x0B, 0x0D, 0x09, 0x09, 0x0E, 0x0B, 0x0D, 0x0D, 0x09, 0x0E, 0x0B, 0x0B, 0x0D, 0x09, 0x0E]


RCON = []
for rcon_value in [2 ** 24, 2 ** 25, 2 ** 26, 2 ** 27, 2 ** 28, 2 ** 29, 2 ** 30, 2 ** 31, 0x1b000000, 0x36000000]:
    RCON.append(rcon_value.to_bytes(5, "big")[1:5])


def _key_expansion(key: bytes):
    words = []
    w0 = int.from_bytes(key[0:4], "big")
    w1 = int.from_bytes(key[4:8], "big")
    w2 = int.from_bytes(key[8:12], "big")
    w3 = int.from_bytes(key[12:16], "big")
    for i in range(11):
        if i != 0:
            w0 = w0 ^ int.from_bytes(z1, "big")
            w1 = w1 ^ w0
            w2 = w2 ^ w1
            w3 = w3 ^ w2
        words.append(w0)
        words.append(w1)
        words.append(w2)
        words.append(w3)
        if i != 10:
            temp = w3.to_bytes(4, "big")
            z1 = [
                RCON[i][0] ^ _sub_word(temp[1]),
                RCON[i][1] ^ _sub_word(temp[2]),
                RCON[i][2] ^ _sub_word(temp[3]),
                RCON[i][3] ^ _sub_word(temp[0])
            ]

    return words


def encrypt_aes(plaintext: bytes, key: bytes):
    ciphertext = b""
    for i in range(0, len(plaintext), 16):
        plaintext_chunk = plaintext[i:i+16]
        plaintext_chunk = pad_pkcs7(plaintext_chunk, 16)
        ciphertext += encrypt_aes_chunk(plaintext_chunk, key)
    return ciphertext


def encrypt_aes_chunk(plaintext: bytes, key: bytes):
    round_keys = _key_expansion(key)
    plaintext = _add_round_key(plaintext, _get_key_word(round_keys[0:4]))
    plaintext = bytearray(plaintext.to_bytes(16, "big"))
    for i in range(1, 10):
        plaintext = _aes_encrypt_round(plaintext, _get_key_word(round_keys[4*i:4*(i+1)]))
    ciphertext = _aes_encrypt_final_round(plaintext, _get_key_word(round_keys[40:44]))
    return ciphertext


def decrypt_aes(ciphertext: bytes, key: bytes):
    round_keys = _key_expansion(key)
    ciphertext = _add_round_key(ciphertext, _get_key_word(round_keys[40:44]))
    ciphertext = bytearray(ciphertext.to_bytes(16, "big"))
    for i in range(9, 0, -1):
        ciphertext = _aes_decrypt_round(ciphertext, _get_key_word(round_keys[4*i:4*(i+1)]))
    return _aes_decrypt_final_round(ciphertext, _get_key_word(round_keys[0:4]))


def _get_key_word(key_bytes: list[int]):
    key = b""
    for key_byte in key_bytes:
        key += key_byte.to_bytes(4, "big")
    return int.from_bytes(key, "big")


def _aes_decrypt_round(ciphertext: bytearray, key):
    ciphertext = _shift_rows_inv(ciphertext)
    ciphertext = _substitute_word_inv(ciphertext)
    ciphertext = _add_round_key(ciphertext, key)
    ciphertext = bytearray(ciphertext.to_bytes(16, "big"))
    ciphertext = _mix_column_transformation_inv(ciphertext)
    return ciphertext


def _aes_encrypt_round(plaintext: bytearray, key):
    plaintext = _substitute_word(plaintext)
    plaintext = _shift_rows(plaintext)
    plaintext = _mix_column_transformation(plaintext)
    plaintext = _add_round_key(plaintext, key)
    return bytearray(plaintext.to_bytes(16, "big"))


def _aes_encrypt_final_round(plaintext: bytearray, key):
    plaintext = _substitute_word(plaintext)
    plaintext = _shift_rows(plaintext)
    plaintext = _add_round_key(plaintext, key)
    return bytearray(plaintext.to_bytes(16, "big"))


def _aes_decrypt_final_round(ciphertext: bytearray, key):
    ciphertext = _shift_rows_inv(ciphertext)
    ciphertext = _substitute_word_inv(ciphertext)
    ciphertext = _add_round_key(ciphertext, key)
    ciphertext = bytearray(ciphertext.to_bytes(16, "big"))
    return ciphertext


def _add_round_key(plaintext: bytes or bytearray, key: int):
    return int.from_bytes(plaintext, "big") ^ key


def _shift_rows(plaintext):
    for i in range(1, 4):
        temp = plaintext[i::4]
        temp = _shift(temp, i)
        for j in range(i, 16, 4):
            plaintext[j] = temp.pop(0)
    return plaintext


def _shift_rows_inv(ciphertext):
    for i in range(1, 4):
        temp = ciphertext[i::4]
        temp = _shift_inv(temp, i)
        for j in range(i, 16, 4):
            ciphertext[j] = temp.pop(0)
    return ciphertext


def _shift_inv(word: bytearray, shift: int):
    for i in range(shift):
        word.insert(0, word.pop())
    return word


def _shift(word: bytearray, shift: int):
    for i in range(shift):
        word.append(word.pop(0))
    return word


def _mix_column_transformation(plaintext: bytearray):
    ciphertext = bytearray(16)
    for i in range(0, 16, 4):
        for j in range(0, 4):
            for k in range(0, 4):
                temp = _galois_multiplication(plaintext[i + k], MIX_COLUMN_MATRIX[k+(4*j)])
                ciphertext[j + i] = ciphertext[j + i] ^ temp
    return ciphertext


def _mix_column_transformation_inv(ciphertext: bytearray):
    plaintext = bytearray(16)
    for i in range(0, 16, 4):
        for j in range(0, 4):
            temp = 0
            for k in range(0, 4):
                temp = temp ^ _galois_multiplication(ciphertext[i + k], INV_MIX_COLUMN_MATRIX[k+(4*j)])
            plaintext[j + i] = temp
    return plaintext


def _substitute_word(plaintext):
    for i in range(len(plaintext)):
        plaintext[i] = _sub_word(plaintext[i])
    return plaintext


def _substitute_word_inv(ciphertext):
    for i in range(len(ciphertext)):
        ciphertext[i] = _sub_word_inv(ciphertext[i])
    return ciphertext


def _left_rotate_word(word: int):
    return (word << 8 | (word >> (32 - 8))).to_bytes(5, byteorder="big")[1:5]


def _sub_word(word: int):
    return SBOX[word]


def _sub_word_inv(word: int):
    thing = SBOX_INV[word]
    return SBOX_INV[word]


def _galois_multiplication(first_num: int, second_num: int):
    if second_num == 1:
        return first_num
    if second_num == 2:
        return galois_multiply_by_2(first_num)
    if second_num == 3:
        return galois_multiply_by_3(first_num)
    temp = 0
    # multiply
    for i in range(8, -1, -1):
        if 2 ** i <= first_num:
            first_num -= 2**i
            if not temp:
                temp = second_num << i
            else:
                temp = temp ^ (second_num << i)
    # simplify using irreducible polynomial 100011011 (283)
    for i in range(16, 7, -1):
        if 2 ** i <= temp:
            temp = temp ^ (283 << (i-8))
    return temp


def galois_multiply_by_2(first_num: int):
    if first_num >= 128:
        return (first_num << 1) ^ 0b100011011
    return first_num << 1


def galois_multiply_by_3(first_num: int):
    return galois_multiply_by_2(first_num) ^ first_num
